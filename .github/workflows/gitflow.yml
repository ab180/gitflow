name: gitflow

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
    branches:
      - main
      - develop
  workflow_call:
    secrets:
      TOKEN:
        description: 'GitHub token (Default: GitHub Action token)'
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN || github.token }}
  SOURCE_BRANCH: ${{ github.event.pull_request.head.ref }}
  SOURCE_COMMIT: ${{ github.event.pull_request.head.sha }}
  DESTINATION_BRANCH: ${{ github.event.pull_request.base.ref }}
  DESTINATION_COMMIT: ${{ github.event.pull_request.base.sha }}

jobs:
  gitflow:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch
        id: check-branch
        run: |
          if [[ ${{
            (
              contains(env.SOURCE_BRANCH, 'feature/')
              || contains(env.SOURCE_BRANCH, 'refactor/')
              || contains(env.SOURCE_BRANCH, 'fix/')
              || contains(env.SOURCE_BRANCH, 'change/')
              || contains(env.SOURCE_BRANCH, 'document/')
              || contains(env.SOURCE_BRANCH, 'test/')
            )
            && env.DESTINATION_BRANCH == 'develop'
          }} == true ]]; then
            echo 'type=feature' >> $GITHUB_OUTPUT
          elif [[ ${{
            (
              contains(env.SOURCE_BRANCH, 'release/')
              || contains(env.SOURCE_BRANCH, 'hotfix/')
              || contains(env.SOURCE_BRANCH, 'norelease/')
            )
            && env.DESTINATION_BRANCH == 'main'
          }} == true ]]; then
            echo 'type=release' >> $GITHUB_OUTPUT
          elif [[ ${{
            (
              contains(env.SOURCE_BRANCH, 'release/')
              || contains(env.SOURCE_BRANCH, 'hotfix/')
              || contains(env.SOURCE_BRANCH, 'norelease/')
            )
            && env.DESTINATION_BRANCH == 'develop'
          }} == true ]]; then
            echo 'type=finish-release' >> $GITHUB_OUTPUT
          else
            exit 1
          fi

      - name: If fail on check branch
        if: failure() && steps.check-branch.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const message = [
              'Invalid pull request: ',
              'only (release/ or hotfix/ => main) ',
              'or (feature/ or refactor/ or fix/ or change/ or document/ or test/ => develop) is allowed',
            ].join('')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
            core.setFailed(message)
          github-token: ${{ env.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check feature branch
        id: check-feature-branch
        if: |
          github.event.pull_request.merged != true
          && steps.check-branch.outcome == 'success'
          && steps.check-branch.outputs.type == 'feature'
        run: |
          cat changelog.md \
            | grep '^## Unreleased$' \
            || (echo 'failure=changelog-not-contains-unreleased' >> $GITHUB_OUTPUT; exit 1)
          git diff --name-only origin/${{ env.DESTINATION_BRANCH }} \
            | grep --perl-regexp 'changelog\.md' \
            || (echo 'warning=changelog-not-modified' >> $GITHUB_OUTPUT; exit 0)

      - name: If fail on check feature branch
        if: failure() && steps.check-feature-branch.outputs.failure != null
        uses: actions/github-script@v6
        with:
          script: |
            const message = (() => {
              if ('${{ steps.check-feature-branch.outputs.failure }}' === 'changelog-not-contains-unreleased') {
                return `Invalid pull request: '## Unreleased' should be existed on changelog.md`
              }
            })()
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
            core.setFailed(message)
          github-token: ${{ env.GITHUB_TOKEN }}

      - name: If warn on check feature branch
        if: always() && steps.check-feature-branch.outputs.warning != null
        uses: actions/github-script@v6
        with:
          script: |
            const message = (() => {
              if ('${{ steps.check-feature-branch.outputs.failure }}' === 'changelog-not-modified') {
                return `I recommend that you should modify changelog.md.`
              }
            })()
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
          github-token: ${{ env.GITHUB_TOKEN }}

      - name: Check release branch
        id: check-release-branch
        if: |
          github.event.pull_request.merged != true
          && steps.check-branch.outcome == 'success'
          && steps.check-branch.outputs.type == 'release'
        run: |
          VERSION=$(
            echo '${{ env.SOURCE_BRANCH }}' \
              | grep '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' --only-matching
          ) \
          && echo "version=$VERSION" >> $GITHUB_OUTPUT
          || (echo 'failure=version-not-found' >> $GITHUB_OUTPUT; exit 1)
          cat changelog.md \
            | grep '^## Unreleased$' \
            && (echo 'failure=changelog-contains-unreleased' >> $GITHUB_OUTPUT; exit 1) \
            || :
          cat changelog.md \
            | grep "^## $VERSION$" \
            || (echo 'failure=changelog-not-contains-version' >> $GITHUB_OUTPUT; exit 1)
          CHANGELOG=$(
            cat changelog.md \
              | perl -0pe "s/(.*\n)*## $VERSION\n//g" \
              | perl -0pe 's/(\n?)## .*\n(.*\n)*/\1/g' \
              | perl -0pe 's/^\n*//g' \
              | perl -0pe 's/\n*$//g'
          ) \
          && ! [[ -z $CHANGELOG ]] \
          || (echo 'failure=changelog-is-empty' >> $GITHUB_OUTPUT; exit 1)

      - name: If fail on check release branch
        if: failure() && steps.check-release-branch.outputs.failure != null
        uses: actions/github-script@v6
        with:
          script: |
            const message = (() => {
              if ('${{ steps.check-release-branch.outputs.failure }}' === 'version-not-found') {
                return `Invalid pull request: source branch should satisfy 'type/0.0.0' format`
              }
              else if ('${{ steps.check-release-branch.outputs.failure }}' === 'changelog-contains-unreleased') {
                return `Invalid pull request: '## Unreleased' should not be existed on changelog.md`
              }
              else if ('${{ steps.check-release-branch.outputs.failure }}' === 'changelog-not-contains-version') {
                const version = '${{ steps.check-release-branch.outputs.version }}'
                return `Invalid pull request: '## ${version}' should be existed on changelog.md`
              }
              else if ('${{ steps.check-release-branch.outputs.failure }}' === 'changelog-is-empty') {
                return `Invalid pull request: changelog is empty`
              }
            })()
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
            core.setFailed(message)
          github-token: ${{ env.GITHUB_TOKEN }}

      - name: Finish feature branch
        id: finish-feature-branch
        if: |
          github.event.pull_request.merged == true
          && steps.check-branch.outcome == 'success'
          && steps.check-branch.outputs.type == 'feature'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: references } = await github.rest.git.listMatchingRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/${{ env.SOURCE_BRANCH }}',
            })
            if (references.length == 0) {
              return
            }
            github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/${{ env.SOURCE_BRANCH }}',
            })
          github-token: ${{ env.GITHUB_TOKEN }}

      - name: Finish release branch
        id: finish-release-branch
        if: |
          github.event.pull_request.merged == true
          && steps.check-branch.outcome == 'success'
          && steps.check-branch.outputs.type == 'release'
        run: |
          VERSION=$(
            echo '${{ env.SOURCE_BRANCH }}' \
              | grep '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' --only-matching
          )
          CHANGELOG=$(
            cat changelog.md \
              | perl -0pe "s/(.*\n)*## $VERSION\n//g" \
              | perl -0pe 's/(\n?)## .*\n(.*\n)*/\1/g' \
              | perl -0pe 's/^\n*//g' \
              | perl -0pe 's/\n*$//g'
          )
          gh release create $VERSION \
            --generate-notes \
            --notes '## Changelog'$'\n'"$CHANGELOG"$'\n''---'$'\n' \
            --latest
          (
            git branch --delete '${{ env.SOURCE_BRANCH }}' || :
            git checkout -b '${{ env.SOURCE_BRANCH }}' 'origin/${{ env.SOURCE_BRANCH }}'
              || (
                git checkout -b '${{ env.SOURCE_BRANCH }}' '${{ env.SOURCE_COMMIT }}'
                git push -u origin '${{ env.SOURCE_BRANCH }}'
              )
            git branch --delete '${{ env.SOURCE_BRANCH }}' || :
          )
          PULL_REQUEST_NUMBER=$(
            gh pr create \
              --head '${{ env.SOURCE_BRANCH }}' \
              --base 'develop' \
              --title "release: $VERSION to develop" \
              --body "release: $VERSION to develop" \
              | grep '\/pull\/[0-9][0-9]*' --only-matching \
              | grep '[0-9][0-9]*' --only-matching
          )
          gh pr merge $PULL_REQUEST_NUMBER \
            --subject "release: $VERSION to develop" \
            --delete-branch \
            --merge \
            || (
              gh pr merge $PULL_REQUEST_NUMBER \
              --subject "release: $VERSION to develop" \
              --admin \
              --delete-branch \
              --merge
            )
            || exit 0
